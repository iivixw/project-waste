import React, { useState } from "react";
import axios from "axios";
import SidebarEmployee from "./SidebarEmployee";
import "./ReportWaste.css";
import {
  PieChart, Pie, Cell,
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  ResponsiveContainer
} from "recharts";

const COLORS = ["#ffc107", "#28a745", "#007bff"];

const ReportWaste = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [report, setReport] = useState(null);
  const [message, setMessage] = useState("");

  const handleGenerateReport = async () => {
    if (!startDate || !endDate) {
      setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
      return;
    }

    try {
      const response = await axios.get("http://localhost:5000/api/reportWaste", {
        params: { start_date: startDate, end_date: endDate },
      });
      setReport(response.data);
      setMessage("");
    } catch (error) {
      console.error("Error fetching report:", error);
      setMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô");
      setReport(null);
    }
  };

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
  const pieData = [
    { name: "‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", value: 400 },
    { name: "‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•", value: 300 },
    { name: "‡∏Ç‡∏¢‡∏∞‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå", value: 300 },
  ];

  const barData = [
    { name: "‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•", ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 90 },
    { name: "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå", ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 75 },
    { name: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 60 },
  ];

  return (
    <div className="report-layout">
      <SidebarEmployee />
      <div className="report-main-content">
        {/* üìã ‡∏ü‡∏≠‡∏£‡πå‡∏° */}
        <div className="report-form-card">
          <h1 className="report-title">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•</h1>

          <div className="report-form">
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
            <button onClick={handleGenerateReport}>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</button>
          </div>

          {message && <p className="report-message">{message}</p>}

          {report && (
            <div className="report-summary">
              <p><strong>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {report.total_weight} ‡∏Å‡∏Å.</p>
              <p><strong>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•:</strong> {report.total_revenue} ‡∏ö‡∏≤‡∏ó</p>
            </div>
          )}
        </div>

        {/* üìä ‡∏Å‡∏£‡∏≤‡∏ü */}
        <div className="chart-container">
          <div className="chart-card">
            <h3>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞</h3>
            <ResponsiveContainer width="100%" height={250}>
              <PieChart>
                <Pie
                  data={pieData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  dataKey="value"
                >
                  {pieData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>

          <div className="chart-card">
            <h3>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞</h3>
            <ResponsiveContainer width="100%" height={250}>
              <BarChart data={barData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" fill="#ffc107" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReportWaste;
